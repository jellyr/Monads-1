<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var typesToGenerate = new[]
{
    Tuple.Create(""),
    Tuple.Create("T1"),
    Tuple.Create("T1, T2"),
    Tuple.Create("T1, T2, T3")
};
#>
using System;
using System.Collections.Generic;
using System.Linq;
using Flinq;
using MonadLib.Registries;

namespace MonadLib
{
<# for (var index = 0; index < typesToGenerate.Length; index++) { #>
<# var typeToGenerate = typesToGenerate[index]; #>
<# var addnlTypes = typeToGenerate.Item1; #>
<# var addnlTypesPrefix = string.IsNullOrEmpty(addnlTypes) ? string.Empty : addnlTypes + ", "; #>
<# var addnlTypesList = string.IsNullOrEmpty(addnlTypes) ? string.Empty : "<" + addnlTypes + ">"; #>
<# var isLastTypeToGenerate = (index == typesToGenerate.Length - 1); #>
    internal static partial class MonadCominatorsQueryExtensions
    {
        public static IMonad<<#= addnlTypesPrefix #>TB> Select<<#= addnlTypesPrefix #>TA, TB>(this IMonad<<#= addnlTypesPrefix #>TA> ma, Func<TA, TB> f)
        {
            var monadAdapter = ma.GetMonadAdapter();
            return monadAdapter.Bind(
                ma, a => monadAdapter.Return(f(a)));
        }

        public static IMonad<<#= addnlTypesPrefix #>TB> SelectMany<<#= addnlTypesPrefix #>TA, TB>(this IMonad<<#= addnlTypesPrefix #>TA> ma, Func<TA, IMonad<<#= addnlTypesPrefix #>TB>> f) 
        {
            var monadAdapter = ma.GetMonadAdapter();
            return monadAdapter.Bind(ma, f);
        }

        public static IMonad<<#= addnlTypesPrefix #>TC> SelectMany<<#= addnlTypesPrefix #>TA, TB, TC>(this IMonad<<#= addnlTypesPrefix #>TA> ma, Func<TA, IMonad<<#= addnlTypesPrefix #>TB>> f1, Func<TA, TB, TC> f2) 
        {
            var monadAdapter = ma.GetMonadAdapter();
            return monadAdapter.Bind(
                ma, a => monadAdapter.Bind(
                    f1(a), b => monadAdapter.Return(f2(a, b))));
        }
    }

    public static partial class MonadCombinators<#= addnlTypesList #>
    {
<# if (!new[]{""}.Contains(addnlTypes)) { #>
<# } #>
        public static TMonad LiftM<TMonad, TA, TB>(Func<TA, TB> f, IMonad<<#= addnlTypesPrefix #>TA> ma)
            where TMonad : IMonad<<#= addnlTypesPrefix #>TB>
        {
            return (TMonad)
                from a in ma
                select f(a);
        }

        public static TMonad LiftM2<TMonad, TA, TB, TC>(Func<TA, TB, TC> f, IMonad<<#= addnlTypesPrefix #>TA> ma, IMonad<<#= addnlTypesPrefix #>TB> mb)
            where TMonad : IMonad<<#= addnlTypesPrefix #>TC>
        {
            return (TMonad)
                from a in ma
                from b in mb
                select f(a, b);
        }

        public static TMonad LiftM3<TMonad, TA, TB, TC, TD>(Func<TA, TB, TC, TD> f, IMonad<<#= addnlTypesPrefix #>TA> ma, IMonad<<#= addnlTypesPrefix #>TB> mb, IMonad<<#= addnlTypesPrefix #>TC> mc)
            where TMonad : IMonad<<#= addnlTypesPrefix #>TD>
        {
            return (TMonad)
                from a in ma
                from b in mb
                from c in mc
                select f(a, b, c);
        }

        public static TMonad LiftM4<TMonad, TA, TB, TC, TD, TE>(Func<TA, TB, TC, TD, TE> f, IMonad<<#= addnlTypesPrefix #>TA> ma, IMonad<<#= addnlTypesPrefix #>TB> mb, IMonad<<#= addnlTypesPrefix #>TC> mc, IMonad<<#= addnlTypesPrefix #>TD> md)
            where TMonad : IMonad<<#= addnlTypesPrefix #>TE>
        {
            return (TMonad)
                from a in ma
                from b in mb
                from c in mc
                from d in md
                select f(a, b, c, d);
        }

        public static TMonad LiftM5<TMonad, TA, TB, TC, TD, TE, TF>(Func<TA, TB, TC, TD, TE, TF> f, IMonad<<#= addnlTypesPrefix #>TA> ma, IMonad<<#= addnlTypesPrefix #>TB> mb, IMonad<<#= addnlTypesPrefix #>TC> mc, IMonad<<#= addnlTypesPrefix #>TD> md, IMonad<<#= addnlTypesPrefix #>TE> me)
            where TMonad : IMonad<<#= addnlTypesPrefix #>TF>
        {
            return (TMonad)
                from a in ma
                from b in mb
                from c in mc
                from d in md
                from e in me
                select f(a, b, c, d, e);
        }

        public static TMonad Join<TMonadMonad, TMonad, TA>(TMonadMonad mma)
            where TMonadMonad : IMonad<<#= addnlTypesPrefix #>TMonad>
            where TMonad : IMonad<<#= addnlTypesPrefix #>TA>
        {
            var monadAdapter = MonadAdapterRegistry.Get<#= addnlTypesList #>(typeof(TMonad));
            return (TMonad)monadAdapter.Bind(mma, ma => ma);
        }

        public static TMonad Sequence<TMonad, TA>(IEnumerable<IMonad<<#= addnlTypesPrefix #>TA>> ms)
            where TMonad : IMonad<<#= addnlTypesPrefix #>IEnumerable<TA>>
        {
            var monadAdapter = MonadAdapterRegistry.Get<#= addnlTypesList #>(typeof(TMonad));
            var z = monadAdapter.Return(MonadHelpers.Nil<TA>());
            return (TMonad)ms.FoldRight(
                z, (m, mtick) => monadAdapter.Bind(
                    m, x => monadAdapter.Bind(
                        mtick, xs => monadAdapter.Return(MonadHelpers.Cons(x, xs)))));
        }

        // ReSharper disable InconsistentNaming
        public static TMonad Sequence_<TMonad, TA>(IEnumerable<IMonad<<#= addnlTypesPrefix #>TA>> ms)
            where TMonad : IMonad<<#= addnlTypesPrefix #>Unit>
        // ReSharper restore InconsistentNaming
        {
            var monadAdapter = MonadAdapterRegistry.Get<#= addnlTypesList #>(typeof(TMonad));
            var z = monadAdapter.Return(new Unit());
            return (TMonad)ms.FoldRight(z, monadAdapter.BindIgnoringLeft);
        }

        public static TMonad MapM<TMonad, TA, TB>(Func<TA, IMonad<<#= addnlTypesPrefix #>TB>> f, IEnumerable<TA> @as)
            where TMonad : IMonad<<#= addnlTypesPrefix #>IEnumerable<TB>>
        {
            return Sequence<TMonad, TB>(@as.Map(f));
        }

        // ReSharper disable InconsistentNaming
        public static TMonad MapM_<TMonad, TA, TB>(Func<TA, IMonad<<#= addnlTypesPrefix #>TB>> f, IEnumerable<TA> @as)
            where TMonad : IMonad<<#= addnlTypesPrefix #>Unit>
        // ReSharper restore InconsistentNaming
        {
            return Sequence_<TMonad, TB>(@as.Map(f));
        }

        public static TMonad ReplicateM<TMonad, TA>(int n, IMonad<<#= addnlTypesPrefix #>TA> ma)
            where TMonad : IMonad<<#= addnlTypesPrefix #>IEnumerable<TA>>
        {
            return Sequence<TMonad, TA>(System.Linq.Enumerable.Repeat(ma, n));
        }

        // ReSharper disable InconsistentNaming
        public static TMonad ReplicateM_<TMonad, TA>(int n, IMonad<<#= addnlTypesPrefix #>TA> ma)
            where TMonad : IMonad<<#= addnlTypesPrefix #>Unit>
        // ReSharper restore InconsistentNaming
        {
            return Sequence_<TMonad, TA>(System.Linq.Enumerable.Repeat(ma, n));
        }

        public static TMonad FoldM<TMonad, TA, TB>(Func<TA, TB, IMonad<<#= addnlTypesPrefix #>TA>> f, TA a, IEnumerable<TB> bs)
            where TMonad : IMonad<<#= addnlTypesPrefix #>TA>
        {
            var monadAdapter = MonadAdapterRegistry.Get<#= addnlTypesList #>(typeof(TMonad));
            return (TMonad)bs.HeadAndTail().Match(
                tuple =>
                {
                    var x = tuple.Item1;
                    var xs = tuple.Item2;
                    var m = f(a, x);
                    return monadAdapter.Bind(m, acc => FoldM<TMonad, TA, TB>(f, acc, xs));
                },
                () => monadAdapter.Return(a));
        }

        // ReSharper disable InconsistentNaming
        public static TMonad FoldM_<TMonad, TA, TB>(Func<TA, TB, IMonad<<#= addnlTypesPrefix #>TA>> f, TA a, IEnumerable<TB> bs)
            where TMonad : IMonad<<#= addnlTypesPrefix #>Unit>
        // ReSharper restore InconsistentNaming
        {
            var monadAdapter = MonadAdapterRegistry.Get<#= addnlTypesList #>(typeof(TMonad));
            return (TMonad)monadAdapter.BindIgnoringLeft(FoldM<IMonad<<#= addnlTypesPrefix #>TA>, TA, TB>(f, a, bs), monadAdapter.Return(new Unit()));
        }

        public static TMonad ZipWithM<TMonad, TA, TB, TC>(Func<TA, TB, IMonad<<#= addnlTypesPrefix #>TC>> f, IEnumerable<TA> @as, IEnumerable<TB> bs)
            where TMonad : IMonad<<#= addnlTypesPrefix #>IEnumerable<TC>>
        {
            return Sequence<TMonad, TC>(@as.Zip(bs, f));
        }

        // ReSharper disable InconsistentNaming
        public static TMonad ZipWithM_<TMonad, TA, TB, TC>(Func<TA, TB, IMonad<<#= addnlTypesPrefix #>TC>> f, IEnumerable<TA> @as, IEnumerable<TB> bs)
            where TMonad : IMonad<<#= addnlTypesPrefix #>Unit>
        // ReSharper restore InconsistentNaming
        {
            return Sequence_<TMonad, TC>(@as.Zip(bs, f));
        }

        public static TMonad FilterM<TMonad, TA>(Func<TA, IMonad<<#= addnlTypesPrefix #>bool>> p, IEnumerable<TA> @as)
            where TMonad : IMonad<<#= addnlTypesPrefix #>IEnumerable<TA>>
        {
            var monadAdapter = MonadAdapterRegistry.Get<#= addnlTypesList #>(typeof (TMonad));
            return (TMonad)@as.HeadAndTail().Match(
                tuple =>
                {
                    var x = tuple.Item1;
                    var xs = tuple.Item2;
                    return monadAdapter.Bind(
                        p(x), flg => monadAdapter.Bind(
                            FilterM<TMonad, TA>(p, xs),
                            ys => monadAdapter.Return(flg ? MonadHelpers.Cons(x, ys) : ys)));
                },
                () => monadAdapter.Return(MonadHelpers.Nil<TA>()));
        }

        public static TMonad When<TMonad>(bool b, TMonad m)
			where TMonad : IMonad<<#= addnlTypesPrefix #>Unit>
        {
            var monadAdapter = MonadAdapterRegistry.Get<#= addnlTypesList #>(typeof(TMonad));
            return (TMonad)(b ? m : monadAdapter.Return(new Unit()));
        }

        public static TMonad Unless<TMonad>(bool b, TMonad m)
			where TMonad : IMonad<<#= addnlTypesPrefix #>Unit>
        {
            return When(!b, m);
        }

        // ReSharper disable FunctionRecursiveOnAllPaths
        public static TMonad Forever<TMonad, TA, TB>(IMonad<<#= addnlTypesPrefix #>TA> m)
			where TMonad : IMonad<<#= addnlTypesPrefix #>TB>
        {
            var monadAdapter = MonadAdapterRegistry.Get<#= addnlTypesList #>(typeof(TMonad));
            return (TMonad)monadAdapter.BindIgnoringLeft(m, Forever<TMonad, TA, TB>(m));
        }
        // ReSharper restore FunctionRecursiveOnAllPaths

        public static TMonad Void<TMonad, TA>(IMonad<<#= addnlTypesPrefix #>TA> m)
			where TMonad : IMonad<<#= addnlTypesPrefix #>Unit>
        {
            var monadAdapter = MonadAdapterRegistry.Get<#= addnlTypesList #>(typeof(TMonad));
            return (TMonad)monadAdapter.BindIgnoringLeft(m, monadAdapter.Return(new Unit()));
        }

        public static TMonad Ap<TMonad, TA, TB>(IMonad<<#= addnlTypesPrefix #>Func<TA, TB>> mf, IMonad<<#= addnlTypesPrefix #>TA> ma)
            where TMonad : IMonad<<#= addnlTypesPrefix #>TB>
        {
            return LiftM2<TMonad, Func<TA, TB>, TA, TB>((f, a) => f(a), mf, ma);
        }

        public static Func<TA, TMonad> Compose<TMonad, TA, TB, TC>(Func<TA, IMonad<<#= addnlTypesPrefix #>TB>> f, Func<TB, IMonad<<#= addnlTypesPrefix #>TC>> g)
            where TMonad : IMonad<<#= addnlTypesPrefix #>TC>
        {
            var monadAdapter = MonadAdapterRegistry.Get<#= addnlTypesList #>(typeof(TMonad));
            return a => (TMonad)monadAdapter.Bind(f(a), g);
        }
    }
<# if (!isLastTypeToGenerate) WriteLine(string.Empty); #>
<# } #>
}
