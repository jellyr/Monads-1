<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var typesToGenerate = new[]
{
	Tuple.Create("Maybe", "", false),
	Tuple.Create("Either", "TLeft", false),
	Tuple.Create("State", "TS", false),
	Tuple.Create("Reader", "TR", true)
};
#>
using System;
using System.Collections.Generic;

namespace MonadLib.Generated
{
<# foreach (var typeToGenerate in typesToGenerate) { #>
<# var className = typeToGenerate.Item1; #>
<# var typeName1Comma = typeToGenerate.Item2.Length > 0 ? typeToGenerate.Item2 + ", " : ""; #>
<# var lastTypeToGenerate = typeToGenerate.Item3; #>
	public static partial class <#= className #>
	{
		public static <#= className #><<#= typeName1Comma #>TB> Bind<<#= typeName1Comma #>TA, TB>(this <#= className #><<#= typeName1Comma #>TA> ma, Func<TA, <#= className #><<#= typeName1Comma #>TB>> f)
		{
			var monadAdapter = ma.GetMonadAdapter();
			return (<#= className #><<#= typeName1Comma #>TB>)monadAdapter.Bind(ma, f);
		}
	}
<# if (!lastTypeToGenerate) WriteLine(string.Empty); #>
<# } #>
}
