<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var typesToGenerate = new[]
{
	Tuple.Create("Maybe", ""),
	Tuple.Create("Either", "TLeft"),
	Tuple.Create("State", "TS"),
	Tuple.Create("Reader", "TR")
};
#>
using System;
using System.Collections.Generic;

namespace MonadLib.Generated
{
<# for (var index = 0; index < typesToGenerate.Length; index++) { #>
<# var typeToGenerate = typesToGenerate[index]; #>
<# var M = typeToGenerate.Item1; #>
<# var T1 = string.IsNullOrEmpty(typeToGenerate.Item2) ? string.Empty : typeToGenerate.Item2 + ", "; #>
<# var lastTypeToGenerate = (index == typesToGenerate.Length - 1); #>
	public static partial class <#= M #>
	{
		public static <#= M #><<#= T1 #>TB> Bind<<#= T1 #>TA, TB>(this <#= M #><<#= T1 #>TA> ma, Func<TA, <#= M #><<#= T1 #>TB>> f)
		{
			var monadAdapter = ma.GetMonadAdapter();
			return (<#= M #><<#= T1 #>TB>)monadAdapter.Bind(ma, f);
		}
	}
<# if (!lastTypeToGenerate) WriteLine(string.Empty); #>
<# } #>
}
