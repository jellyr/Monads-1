<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var typesToGenerate = new[]
{
    Tuple.Create("Maybe", "", "", true),
    Tuple.Create("Either", "TLeft", "", false),
    Tuple.Create("State", "TS", "", false),
    Tuple.Create("Reader", "TR", "", false),
    Tuple.Create("Writer", "TMonoid, TW", "where TMonoid : IMonoid<TW>", false)
};
#>
using System;
using System.Collections.Generic;
using System.Linq;
using MonadLib.Registries;

namespace MonadLib
{
<# for (var index = 0; index < typesToGenerate.Length; index++) { #>
<# var typeToGenerate = typesToGenerate[index]; #>
<# var monadName = typeToGenerate.Item1; #>
<# var addnlTypes = typeToGenerate.Item2; #>
<# var typeConstraints = typeToGenerate.Item3; #>
<# var isMonadPlus = typeToGenerate.Item4; #>
<# var addnlTypesPrefix = string.IsNullOrEmpty(addnlTypes) ? string.Empty : addnlTypes + ", "; #>
<# var addnlTypesList = string.IsNullOrEmpty(addnlTypes) ? string.Empty : "<" + addnlTypes + ">"; #>
<# var monadAdapterType = string.Format("{0}MonadAdapter{1}", monadName, addnlTypesList); #>
<# var isLastTypeToGenerate = (index == typesToGenerate.Length - 1); #>
    public static partial class <#= monadName #>
    {
<# if (!new[]{"Maybe"}.Contains(monadName)) { #>
<# } #>
        public static <#= monadName #><<#= addnlTypesPrefix #>TA> Join<<#= addnlTypesPrefix #>TA>(<#= monadName #><<#= addnlTypesPrefix #><#= monadName #><<#= addnlTypesPrefix #>TA>> mma) <#= typeConstraints #>
        {
            return MonadCombinators<#= addnlTypesList #>.Join<<#= monadName #><<#= addnlTypesPrefix #><#= monadName #><<#= addnlTypesPrefix #>TA>>, <#= monadName #><<#= addnlTypesPrefix #>TA>, TA>(mma);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TB> Select<<#= addnlTypesPrefix #>TA, TB>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, Func<TA, TB> f) <#= typeConstraints #>
        {
            return ma.Map(f);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TB> SelectMany<<#= addnlTypesPrefix #>TA, TB>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f) <#= typeConstraints #>
        {
            return ma.FlatMap(f);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TC> SelectMany<<#= addnlTypesPrefix #>TA, TB, TC>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f1, Func<TA, TB, TC> f2) <#= typeConstraints #>
        {
<# if (string.IsNullOrEmpty(addnlTypesList)) { #>
            return ma.FlatMap(
                a => f1(a).FlatMap(
                    b => Return(f2(a, b))));
<# } else { #>
            return ma.FlatMap(
                a => f1(a).FlatMap(
                    b => <#= monadName #><#= addnlTypesList #>.Return(f2(a, b))));
<# } #>
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TB> Bind<<#= addnlTypesPrefix #>TA, TB>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f) <#= typeConstraints #>
        {
            var monadAdapter = ma.GetMonadAdapter();
            return (<#= monadName #><<#= addnlTypesPrefix #>TB>)monadAdapter.Bind(ma, f);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TB> BindIgnoringLeft<<#= addnlTypesPrefix #>TA, TB>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, <#= monadName #><<#= addnlTypesPrefix #>TB> mb) <#= typeConstraints #>
        {
            var monadAdapter = ma.GetMonadAdapter();
            return (<#= monadName #><<#= addnlTypesPrefix #>TB>)monadAdapter.BindIgnoringLeft(ma, mb);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TB> Map<<#= addnlTypesPrefix #>TA, TB>(Func<TA, TB> f, <#= monadName #><<#= addnlTypesPrefix #>TA> ma) <#= typeConstraints #>
        {
            return ma.Map(f);
        }
        
        public static <#= monadName #><<#= addnlTypesPrefix #>TB> Map<<#= addnlTypesPrefix #>TA, TB>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, Func<TA, TB> f) <#= typeConstraints #>
        {
            return ma.LiftM(f);
        }
        
        public static <#= monadName #><<#= addnlTypesPrefix #>TB> FlatMap<<#= addnlTypesPrefix #>TA, TB>(Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f, <#= monadName #><<#= addnlTypesPrefix #>TA> ma) <#= typeConstraints #>
        {
            return ma.Bind(f);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TB> FlatMap<<#= addnlTypesPrefix #>TA, TB>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f) <#= typeConstraints #>
        {
            return ma.Bind(f);
        }
        
        public static <#= monadName #><<#= addnlTypesPrefix #>TB> LiftM<<#= addnlTypesPrefix #>TA, TB>(Func<TA, TB> f, <#= monadName #><<#= addnlTypesPrefix #>TA> ma) <#= typeConstraints #>
        {
            return ma.LiftM(f);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TB> LiftM<<#= addnlTypesPrefix #>TA, TB>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, Func<TA, TB> f) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>TB>)MonadCombinators<#= addnlTypesList #>.LiftM(f, ma);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TC> LiftM2<<#= addnlTypesPrefix #>TA, TB, TC>(Func<TA, TB, TC> f, <#= monadName #><<#= addnlTypesPrefix #>TA> ma, <#= monadName #><<#= addnlTypesPrefix #>TB> mb) <#= typeConstraints #>
        {
            return ma.LiftM2(mb, f);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TC> LiftM2<<#= addnlTypesPrefix #>TA, TB, TC>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, <#= monadName #><<#= addnlTypesPrefix #>TB> mb, Func<TA, TB, TC> f) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>TC>)MonadCombinators<#= addnlTypesList #>.LiftM2(f, ma, mb);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TD> LiftM3<<#= addnlTypesPrefix #>TA, TB, TC, TD>(Func<TA, TB, TC, TD> f, <#= monadName #><<#= addnlTypesPrefix #>TA> ma, <#= monadName #><<#= addnlTypesPrefix #>TB> mb, <#= monadName #><<#= addnlTypesPrefix #>TC> mc) <#= typeConstraints #>
        {
            return ma.LiftM3(mb, mc, f);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TD> LiftM3<<#= addnlTypesPrefix #>TA, TB, TC, TD>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, <#= monadName #><<#= addnlTypesPrefix #>TB> mb, <#= monadName #><<#= addnlTypesPrefix #>TC> mc, Func<TA, TB, TC, TD> f) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>TD>)MonadCombinators<#= addnlTypesList #>.LiftM3(f, ma, mb, mc);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TE> LiftM4<<#= addnlTypesPrefix #>TA, TB, TC, TD, TE>(Func<TA, TB, TC, TD, TE> f, <#= monadName #><<#= addnlTypesPrefix #>TA> ma, <#= monadName #><<#= addnlTypesPrefix #>TB> mb, <#= monadName #><<#= addnlTypesPrefix #>TC> mc, <#= monadName #><<#= addnlTypesPrefix #>TD> md) <#= typeConstraints #>
        {
            return ma.LiftM4(mb, mc, md, f);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TE> LiftM4<<#= addnlTypesPrefix #>TA, TB, TC, TD, TE>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, <#= monadName #><<#= addnlTypesPrefix #>TB> mb, <#= monadName #><<#= addnlTypesPrefix #>TC> mc, <#= monadName #><<#= addnlTypesPrefix #>TD> md, Func<TA, TB, TC, TD, TE> f) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>TE>)MonadCombinators<#= addnlTypesList #>.LiftM4(f, ma, mb, mc, md);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TF> LiftM5<<#= addnlTypesPrefix #>TA, TB, TC, TD, TE, TF>(Func<TA, TB, TC, TD, TE, TF> f, <#= monadName #><<#= addnlTypesPrefix #>TA> ma, <#= monadName #><<#= addnlTypesPrefix #>TB> mb, <#= monadName #><<#= addnlTypesPrefix #>TC> mc, <#= monadName #><<#= addnlTypesPrefix #>TD> md, <#= monadName #><<#= addnlTypesPrefix #>TE> me) <#= typeConstraints #>
        {
            return ma.LiftM5(mb, mc, md, me, f);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TF> LiftM5<<#= addnlTypesPrefix #>TA, TB, TC, TD, TE, TF>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, <#= monadName #><<#= addnlTypesPrefix #>TB> mb, <#= monadName #><<#= addnlTypesPrefix #>TC> mc, <#= monadName #><<#= addnlTypesPrefix #>TD> md, <#= monadName #><<#= addnlTypesPrefix #>TE> me, Func<TA, TB, TC, TD, TE, TF> f) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>TF>)MonadCombinators<#= addnlTypesList #>.LiftM5(f, ma, mb, mc, md, me);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TA>> Sequence<<#= addnlTypesPrefix #>TA>(IEnumerable<<#= monadName #><<#= addnlTypesPrefix #>TA>> ms) <#= typeConstraints #>
        {
            return MonadCombinators<#= addnlTypesList #>.Sequence<<#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TA>>, TA>(ms);
        }

        // ReSharper disable InconsistentNaming
        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> Sequence_<<#= addnlTypesPrefix #>TA>(IEnumerable<<#= monadName #><<#= addnlTypesPrefix #>TA>> ms) <#= typeConstraints #>
        // ReSharper restore InconsistentNaming
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>Unit>)MonadCombinators<#= addnlTypesList #>.SequenceInternal_(ms, new <#= monadAdapterType #>());
        }

        // ReSharper disable InconsistentNaming
        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> Sequence_<<#= addnlTypesPrefix #>TA>(params <#= monadName #><<#= addnlTypesPrefix #>TA>[] ms) <#= typeConstraints #>
        // ReSharper restore InconsistentNaming
        {
            return Sequence_(ms.AsEnumerable());
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TB>> MapM<<#= addnlTypesPrefix #>TA, TB>(Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f, IEnumerable<TA> @as) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TB>>)MonadCombinators<#= addnlTypesList #>.MapMInternal(f, @as, new <#= monadAdapterType #>());
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TB>> MapM<<#= addnlTypesPrefix #>TA, TB>(Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f, params TA[] @as) <#= typeConstraints #>
        {
            return MapM(f, @as.AsEnumerable());
        }

        // ReSharper disable InconsistentNaming
        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> MapM_<<#= addnlTypesPrefix #>TA, TB>(Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f, IEnumerable<TA> @as) <#= typeConstraints #>
        // ReSharper restore InconsistentNaming
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>Unit>)MonadCombinators<#= addnlTypesList #>.MapMInternal_(f, @as, new <#= monadAdapterType #>());
        }

        // ReSharper disable InconsistentNaming
        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> MapM_<<#= addnlTypesPrefix #>TA, TB>(Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f, params TA[] @as) <#= typeConstraints #>
        // ReSharper restore InconsistentNaming
        {
            return MapM_(f, @as.AsEnumerable());
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TB>> ForM<<#= addnlTypesPrefix #>TA, TB>(IEnumerable<TA> @as, Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TB>>)MonadCombinators<#= addnlTypesList #>.MapMInternal(f, @as, new <#= monadAdapterType #>());
        }

        // ReSharper disable InconsistentNaming
        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> ForM_<<#= addnlTypesPrefix #>TA, TB>(IEnumerable<TA> @as, Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f) <#= typeConstraints #>
        // ReSharper restore InconsistentNaming
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>Unit>)MonadCombinators<#= addnlTypesList #>.MapMInternal_(f, @as, new <#= monadAdapterType #>());
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TA>> ReplicateM<<#= addnlTypesPrefix #>TA>(int n, <#= monadName #><<#= addnlTypesPrefix #>TA> ma) <#= typeConstraints #>
        {
            return ma.ReplicateM(n);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TA>> ReplicateM<<#= addnlTypesPrefix #>TA>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, int n) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TA>>)MonadCombinators<#= addnlTypesList #>.ReplicateM(n, ma);
        }

        // ReSharper disable InconsistentNaming
        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> ReplicateM_<<#= addnlTypesPrefix #>TA>(int n, <#= monadName #><<#= addnlTypesPrefix #>TA> ma) <#= typeConstraints #>
        // ReSharper restore InconsistentNaming
        {
            return ma.ReplicateM_(n);
        }

        // ReSharper disable InconsistentNaming
        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> ReplicateM_<<#= addnlTypesPrefix #>TA>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, int n) <#= typeConstraints #>
        // ReSharper restore InconsistentNaming
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>Unit>)MonadCombinators<#= addnlTypesList #>.ReplicateM_(n, ma);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TA> FoldM<<#= addnlTypesPrefix #>TA, TB>(Func<TA, TB, <#= monadName #><<#= addnlTypesPrefix #>TA>> f, TA a, IEnumerable<TB> bs) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>TA>)MonadCombinators<#= addnlTypesList #>.FoldMInternal(f, a, bs, new <#= monadAdapterType #>());
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TA> FoldM<<#= addnlTypesPrefix #>TA, TB>(Func<TA, TB, <#= monadName #><<#= addnlTypesPrefix #>TA>> f, TA a, params TB[] bs) <#= typeConstraints #>
        {
            return FoldM(f, a, bs.AsEnumerable());
        }

        // ReSharper disable InconsistentNaming
        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> FoldM_<<#= addnlTypesPrefix #>TA, TB>(Func<TA, TB, <#= monadName #><<#= addnlTypesPrefix #>TA>> f, TA a, IEnumerable<TB> bs) <#= typeConstraints #>
        // ReSharper restore InconsistentNaming
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>Unit>)MonadCombinators<#= addnlTypesList #>.FoldMInternal_(f, a, bs, new <#= monadAdapterType #>());
        }

        // ReSharper disable InconsistentNaming
        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> FoldM_<<#= addnlTypesPrefix #>TA, TB>(Func<TA, TB, <#= monadName #><<#= addnlTypesPrefix #>TA>> f, TA a, params TB[] bs) <#= typeConstraints #>
        // ReSharper restore InconsistentNaming
        {
            return FoldM_(f, a, bs.AsEnumerable());
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TC>> ZipWithM<<#= addnlTypesPrefix #>TA, TB, TC>(Func<TA, TB, <#= monadName #><<#= addnlTypesPrefix #>TC>> f, IEnumerable<TA> @as, IEnumerable<TB> bs) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TC>>)MonadCombinators<#= addnlTypesList #>.ZipWithMInternal(f, @as, bs, new <#= monadAdapterType #>());
        }

        // ReSharper disable InconsistentNaming
        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> ZipWithM_<<#= addnlTypesPrefix #>TA, TB, TC>(Func<TA, TB, <#= monadName #><<#= addnlTypesPrefix #>TC>> f, IEnumerable<TA> @as, IEnumerable<TB> bs) <#= typeConstraints #>
        // ReSharper restore InconsistentNaming
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>Unit>)MonadCombinators<#= addnlTypesList #>.ZipWithMInternal_(f, @as, bs, new <#= monadAdapterType #>());
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TA>> FilterM<<#= addnlTypesPrefix #>TA>(Func<TA, <#= monadName #><<#= addnlTypesPrefix #>bool>> p, IEnumerable<TA> @as) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TA>>)MonadCombinators<#= addnlTypesList #>.FilterMInternal(p, @as, new <#= monadAdapterType #>());
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>IEnumerable<TA>> FilterM<<#= addnlTypesPrefix #>TA>(Func<TA, <#= monadName #><<#= addnlTypesPrefix #>bool>> p, params TA[] @as) <#= typeConstraints #>
        {
            return FilterM(p, @as.AsEnumerable());
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> When<#= addnlTypesList #>(bool b, <#= monadName #><<#= addnlTypesPrefix #>Unit> m) <#= typeConstraints #>
        {
            return m.When(b);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> When<#= addnlTypesList #>(this <#= monadName #><<#= addnlTypesPrefix #>Unit> m, bool b) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>Unit>)MonadCombinators<#= addnlTypesList #>.When(b, m);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> Unless<#= addnlTypesList #>(bool b, <#= monadName #><<#= addnlTypesPrefix #>Unit> m) <#= typeConstraints #>
        {
            return m.Unless(b);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> Unless<#= addnlTypesList #>(this <#= monadName #><<#= addnlTypesPrefix #>Unit> m, bool b) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>Unit>)MonadCombinators<#= addnlTypesList #>.Unless(b, m);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TB> Forever<<#= addnlTypesPrefix #>TA, TB>(this <#= monadName #><<#= addnlTypesPrefix #>TA> m) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>TB>)MonadCombinators<#= addnlTypesList #>.Forever<TA, TB>(m);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> Void<<#= addnlTypesPrefix #>TA>(this <#= monadName #><<#= addnlTypesPrefix #>TA> m) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>Unit>)MonadCombinators<#= addnlTypesList #>.Void(m);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TB> Ap<<#= addnlTypesPrefix #>TA, TB>(<#= monadName #><<#= addnlTypesPrefix #>Func<TA, TB>> mf, <#= monadName #><<#= addnlTypesPrefix #>TA> ma) <#= typeConstraints #>
        {
            return ma.Ap(mf);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TB> Ap<<#= addnlTypesPrefix #>TA, TB>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, <#= monadName #><<#= addnlTypesPrefix #>Func<TA, TB>> mf) <#= typeConstraints #>
        {
            return (<#= monadName #><<#= addnlTypesPrefix #>TB>)MonadCombinators<#= addnlTypesList #>.Ap(mf, ma);
        }

        public static Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TC>> Compose<<#= addnlTypesPrefix #>TA, TB, TC>(Func<TA, <#= monadName #><<#= addnlTypesPrefix #>TB>> f, Func<TB, <#= monadName #><<#= addnlTypesPrefix #>TC>> g) <#= typeConstraints #>
        {
            return a => (<#= monadName #><<#= addnlTypesPrefix #>TC>)MonadCombinators<#= addnlTypesList #>.Compose(f, g)(a);
        }

<# if (isMonadPlus) { #>
        public static <#= monadName #><<#= addnlTypesPrefix #>TA> MZero<TA>()
        {
            var monadPlusAdapter = MonadPlusAdapterRegistry.Get<TA>(typeof(<#= monadName #><<#= addnlTypesPrefix #>TA>));
            return (<#= monadName #><<#= addnlTypesPrefix #>TA>)monadPlusAdapter.MZero;
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TA> MPlus<TA>(this <#= monadName #><<#= addnlTypesPrefix #>TA> xs, <#= monadName #><<#= addnlTypesPrefix #>TA> ys)
        {
            var monadPlusAdapter = MonadPlusAdapterRegistry.Get<TA>(typeof(<#= monadName #><<#= addnlTypesPrefix #>TA>));
            return (<#= monadName #><<#= addnlTypesPrefix #>TA>)monadPlusAdapter.MPlus(xs, ys);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TA> MFilter<TA>(Func<TA, bool> p, <#= monadName #><<#= addnlTypesPrefix #>TA> ma)
        {
			return ma.MFilter(p);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TA> MFilter<TA>(this <#= monadName #><<#= addnlTypesPrefix #>TA> ma, Func<TA, bool> p)
        {
            return MonadPlusCombinators.MFilter<<#= monadName #><<#= addnlTypesPrefix #>TA>, TA>(p, ma);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TA> MSum<TA>(IEnumerable<<#= monadName #><<#= addnlTypesPrefix #>TA>> ms)
        {
            return MonadPlusCombinators.MSum<<#= monadName #><<#= addnlTypesPrefix #>TA>, TA>(ms);
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>TA> MSum<TA>(params <#= monadName #><<#= addnlTypesPrefix #>TA>[] ms)
        {
            return MSum(ms.AsEnumerable());
        }

        public static <#= monadName #><<#= addnlTypesPrefix #>Unit> Guard(bool b)
        {
            return MonadPlusCombinators.Guard<<#= monadName #><<#= addnlTypesPrefix #>Unit>>(b);
        }
<# } #>
    }
<# if (!isLastTypeToGenerate) WriteLine(string.Empty); #>
<# } #>
}
